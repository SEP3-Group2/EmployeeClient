@page "/employee"

@using EmployeeClient.Data
@using EmployeeClient.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IUserService UserService

<EditForm Model="@user" OnValidSubmit="@PatchUser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="row">
            <div class="col-md-9 mx-auto">
                <div class="card card-register">
                    <div class="card-body">
                        <h5 class="card-title text-center">Employee Information</h5>
                        <form class="form-register">

                            @if (loggedInUserID != UserService.GetUserID() && !(loggedInUserPosition.Equals("HR")))
                            {
                                <div class="form-label-group">
                                    <label><i class="material-icons"> email </i> Email: </label> <br />
                                    <textarea class="form-control" readonly placeholder="Email" rows="1" style="resize:none;">@user.Email</textarea>

                                    <label><i class="material-icons"> account_box </i> Name: </label> <br />
                                    <textarea class="form-control" readonly placeholder="Name" rows="1" style="resize:none;">@user.Name</textarea>

                                    <label><i class="material-icons"> home </i> Address: </label> <br />
                                    <textarea class="form-control" readonly placeholder="Address" rows="1" style="resize:none;">@user.Address</textarea>

                                    <label><i class="material-icons"> perm_phone_msg </i> Phone: </label> <br />
                                    <textarea class="form-control" readonly placeholder="Contact" rows="1" style="resize:none;">@user.Contact</textarea>

                                    <label><i class="material-icons"> event_seat </i> Position: </label> <br />
                                    <textarea class="form-control" readonly placeholder="Position" rows="1" style="resize:none;">@user.Position</textarea>

                                    <label><i class="material-icons"> local_convenience_store </i> Store ID: </label> <br />
                                    <textarea class="form-control" readonly placeholder="Store ID" rows="1" style="resize:none;">@user.StoreID</textarea>

                                    <label><i class="material-icons"> security </i> Employee ID: </label> <br />
                                    <textarea class="form-control" readonly placeholder="Employee ID" rows="1" style="resize:none;">@user.UserID</textarea>
                                </div>
                            }
                            else
                            {
                                <div class="form-label-group">

                                    <label><i class="material-icons"> email </i> Email: </label>
                                    <InputText type="text" class="form-control" @bind-Value="user.Email" placeholder="Email" required />

                                    <label><i class="material-icons"> account_box </i> Name:</label>
                                    <InputText class="form-control" @bind-Value="user.Name" placeholder="Name" required />

                                    <label><i class="material-icons"> home </i> Address:</label>
                                    <InputText class="form-control" @bind-Value="user.Address" placeholder="Address" required />

                                    <label><i class="material-icons"> perm_phone_msg </i> Phone Number:</label>
                                    <InputText class="form-control" @bind-Value="user.Contact" placeholder="Phone Number" required />

                                    @if (loggedInUserPosition.Equals("HR"))
                                    {
                                        <label><i class="material-icons"> security </i> Security Level:</label> <br />
                                        <select class="form-control" @bind="user.SecurityLevel" required>
                                            <option>1</option>
                                            <option>2</option>
                                            <option>3</option>
                                            <option>4</option>
                                        </select>
                                    }
                                </div>
                                @if (loggedInUserPosition.Equals("HR"))
                                {
                                    <div class="form-label-group">
                                        <label><i class="material-icons"> event_seat </i> Position:</label>
                                        <InputText type="text" class="form-control" @bind-Value="user.Position" placeholder="Position" required />

                                        <label> <i class="material-icons"> local_convenience_store </i> Store ID:</label>
                                        <select class="form-control" @bind="user.StoreID" required>
                                            <option>1</option>
                                            <option>2</option>
                                            <option>3</option>
                                        </select>
                                        <label><i class="material-icons"> lock </i> Password:</label>
                                        <InputText class="form-control" type="text" @bind-Value="@user.Password" placeholder="Password" required />

                                        <Button type="button" class="btn btn-outline-danger btn-block text-uppercase" style="margin-left: .5rem;" @onclick="DeleteUser">Delete Account</Button>
                                    </div>
                                }

                                @if (!string.IsNullOrWhiteSpace(error))
                                {
                                    <div class="alert alert-danger">
                                        @error
                                    </div>
                                }
                                @if (!string.IsNullOrWhiteSpace(message))
                                {
                                    <div class="alert alert-success">
                                        @message
                                    </div>
                                }
                            }
                        </form>
                        <button class="btn btn-outline-success btn-block text-uppercase" type="submit" style="margin-left: .5rem;">Update</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</EditForm>

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    User user = new User();
    int loggedInUserID;
    string loggedInUserPosition = String.Empty;
    string message = String.Empty;
    string error = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserByIDAsync(UserService.GetUserID());
        var userPrincipal = (await AuthStat).User;

        loggedInUserID = int.Parse(userPrincipal.FindFirst(c => c.Type == ClaimTypes.SerialNumber)?.Value);
        loggedInUserPosition = userPrincipal.FindFirst(c => c.Type == ClaimTypes.Role)?.Value.ToString();
    }

    private async void PatchUser()
    {
        message = String.Empty;
        error = String.Empty;

        var updatedUser = await UserService.UpdateUserAsync(user);

        if (updatedUser.Equals(user))
        {
            Console.WriteLine("no error");
            message = "Employee information has been updated successfully";
        }
        else
        {
            Console.WriteLine("should be an error");
            error = "Employee information failed to update successfully";
        }
        StateHasChanged();
    }

    private async void DeleteUser(MouseEventArgs e)
    {
        message = String.Empty;
        error = String.Empty;

        await UserService.DeleteUserAsync(user.UserID);

        message = "Account has been deleted";

        NavigationManager.NavigateTo("/employees");
    }
}
