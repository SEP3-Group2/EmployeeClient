@page "/AddProduct"
@using EmployeeClient.Models
@using EmployeeClient.Data
@using System.IO
@using EmployeeClient.Data.ImagesService;
@using Microsoft.AspNetCore.Http;
@inject IProductService ProductService
@inject IImagesService ImageService
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "SecurityLevel3")]

<h3>AddProduct</h3>

<EditForm Model="@newProduct" OnValidSubmit="@AddNewProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container">

        <div class="row">
            <div class="col-sm-9 col-md-7  mx-auto">
                <div class="card card-addProduct my-5">
                    <div class="card-body">
                        <h5 class="card-title text-center">Add New Product</h5>

                        <form class="form-addProduct">
                            <div class="form-label-group">
                                <label> <i class="material-icons"> title </i>Title:</label>
                                <InputText class="form-control" @bind-Value="newProduct.Title" placeholder="Title" required />
                                <label> <i class="material-icons"> category </i> Category:</label>
                                <select class="form-control" @bind="newProduct.Category" required>
                                    <option selected disabled hidden>Category</option>
                                    <option >Console </option>
                                    <option>Game </option>
                                    <option>PC Component</option>
                                    <option>Laptop </option>
                                    <option>TV </option>
                                    <option>Media Player</option>
                                    <option>Movie </option>
                                    <option>Speaker </option>
                                    <option>Kitchen Appliance </option>
                                    <option>Iron </option>
                                    <option>Camera </option>
                                    <option>Phone </option>
                                    <option>Smart watch</option>
                                    <option>Headphones </option>
                                    <option>Electric scooter</option>
                                    <option>Air Condtion</option>
                                    <option>Drones </option>
                                </select>


                                <label> <i class="material-icons"> article </i> Description:</label>
                                <InputText class="form-control" @bind-Value="newProduct.Description" placeholder="Description" required />

                                <label> <i class="material-icons"> monetization_on </i> Price: </label>
                                <InputNumber class="form-control" @bind-Value="newProduct.Price" required />

                                <InputFile OnChange="@OnInputFileChange" multiple></InputFile>

                                @if (!string.IsNullOrWhiteSpace(message))
                                {
                                    <div class="alert alert-success">
                                        Image has been uploaded
                                    </div>
                                }
                            </div>

                        </form>
                        <button class="btn btn-outline-success btn-block text-uppercase" type="submit">Create</button>
                    </div>

                </div>
            </div>

        </div>

    </div>

</EditForm>

@code {
    List<FileData> fileData = new List<FileData>();

    string message = String.Empty;

    private Product newProduct = new Product();

    //Stream fileStream = null;

    private async Task AddNewProduct()
    {
        await ProductService.AddProductAsync(newProduct);
        await UploadImages();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        Console.WriteLine("ZFAFADSF");
        var maxAllowedFiles = 10;

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            var buffers = new byte[imageFile.Size];
            await imageFile.OpenReadStream().ReadAsync(buffers);
            string imageType = ".";
            if (imageFile.ContentType.Contains("/"))
            {
                int slashIndex = imageFile.ContentType.IndexOf("/");
                imageType += imageFile.ContentType.Substring(slashIndex+1);

                Console.WriteLine(imageType);
            }
            string imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

            fileData.Add(new FileData
            {
                Data = buffers,
                FileType = imageType,
                Size = imageFile.Size
            });
        }
    }

    private async Task UploadImages()
    {
        Console.WriteLine( "Upload images called");
        if (fileData.Count > 0)
        {
            Console.WriteLine("inside if");
            var files = new SaveFile { Files = fileData, ProductID = await ProductService.GetLastAddedProductID() };
            Console.WriteLine("uploading");
            await ImageService.UploadImage(files);
            message = "uploaded";
        }
    }
}
