@page "/products"

@using EmployeeClient.Models;
@using EmployeeClient.Data;
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@using System.Collections
@using Syncfusion.Blazor.Inputs
@using EmployeeClient.Data.ImagesService
@inject IImagesService ImageService
<div class="container">
    <div class="row searchFilter">

        <div class="col-12 col-md-8" style="padding:2.5px;">
            <input id="table_filter" type="text" class="form-control" @bind-value="Title">
        </div>
        <div class="col-6 col-md-4" style="padding:2.5px;">
            <select @bind="Category" class="btn btn-light" style="width:150px;">
                <option disabled hidden>Select Category...</option>
                <option>All</option>
                <option>Console </option>
                <option>Game </option>
                <option>PC Component</option>
                <option>Laptop </option>
                <option>TV </option>
                <option>Media Player</option>
                <option>Movie </option>
                <option>Speaker </option>
                <option>Kitchen Appliance </option>
                <option>Iron </option>
                <option>Camera </option>
                <option>Phone </option>
                <option>Smart watch</option>
                <option>Headphones </option>
                <option>Electric scooter</option>
                <option>Air Condtion</option>
                <option>Drones </option>
            </select>

            <button @onclick="ExecuteSearch" class="btn btn-primary"><span class="material-icons">search</span></button>
        </div>
    </div>


    <label>DKK</label><br>
    <SfSlider Min="0" Max="10000" @bind-Value="Price" Step="500" Width="300">
        <SliderTooltipData IsVisible="true" ShowOn="TooltipShowOn.Hover" Format="N0" Placement="TooltipPlacement.Before"></SliderTooltipData>
        <SliderTicksData Placement="Placement.After" Format="N0" ShowSmallTicks="false" LargeStep="2500"></SliderTicksData>
    </SfSlider>
</div>

@if (productsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!productsToShow.Any())
{
    <p>
        <em>No items exist. </em>
    </p>
}

else
{
    <div class="container">
        <div class="row">
            @foreach (var product in productsToShow)
            {
                <div class="col-md-3 col-sm-6">
                    <div class="product-grid">
                        <div class="product-image">

                            <a href="#" @onclick="() => TrClickedAtIndex(product.Id)">
                                @if (!(productCount >= productsToShow.Count * 2))
                                {
                                    <img class="pic-1" src="@images[productCount]" />
                                    if (true)
                                    {
                                        productCount++;
                                    }
                                    <img class="pic-2" src="@images[productCount]" />
                                    if (true)
                                    {
                                        productCount++;
                                    }
                                }
                            </a>
                            <ul class="social">
                                <li><a href="#" @onclick="() => TrClickedAtIndex(product.Id)"><i class="material-icons">visibility</i></a></li>
                                <AuthorizeView Policy="Securitylevel3">
                                    <li><a href="#"> <i class="material-icons">settings </i></a></li>
                                </AuthorizeView>
                            </ul>
                        </div>
                        <div class="product-content">
                            <h3 class="title"><a> @product.Title</a></h3>
                            <div class="price">
                                @product.Price DKK
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (true)
            {
                counter = 0;
                productCount = 0;
            }
        </div>
    </div>
}







@code {
    private IList<Product> productsToShow;
    private IList<Product> products;
    public int ID;
    public string Title;
    public string Category = "All";
    public string Description;
    public string Price = "20000";

    private Product productToShow = new Product();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
        productsToShow = products;

        FillImagesWithPlaceholders();

        foreach (var product in productsToShow)
        {
            await GetImagesFromID(product.Id);
        }
    }
    //filters here
    private async Task ExecuteSearch()
    {
        productsToShow = await ProductService.GetTitleCategoryPriceFilteredProductsAsync(Title, Category, Price);

        counter = 0;
        productCount = 0;

        FillImagesWithPlaceholders();

        foreach (var product in productsToShow)
        {
            await GetImagesFromID(product.Id);
        }

        Title = null;
        Category = "All";
    }

    public async Task TrClickedAtIndex(int id)
    {
        ProductService.setProductId(id);
        NavigationManager.NavigateTo("/ProductView");
    }


    private IList<string> imageDataUrls = new List<string>();
    private List<string> images = new List<string>();
    string placeholder = "../css/1.jpg";
    string placeholder2 = "../css/2.jpg";
    public int counter = 0;
    int productCount = 0;

    private void FillImagesWithPlaceholders()
    {
        images = new List<string>(productsToShow.Count * 2);
        for (int i = 0; i < productsToShow.Count * 2; i++)
        {
            if (i % 2 == 0)
            {
                images.Add(placeholder);
            }
            else
            {
                images.Add(placeholder2);
            }
        }
    }

    private async Task GetImagesFromID(int id)
    {
        imageDataUrls.Clear();
        Console.WriteLine("Button pressed");
        SaveFile saveFile = await ImageService.GetImages("two", id);
        Console.WriteLine("STARTING FOREACH");


        if (saveFile.Files.Count < 2)
        {
            counter++;
            counter++;
            return;
        }


        foreach (var file in saveFile.Files)
        {
            Console.WriteLine("FOREACH");
            string contentType = "images/" + file.FileType.Substring(1);
            if (contentType.Equals("images/jpg"))
            {
                contentType = "images/jpeg";
            }

            images[counter] = ($"data:{contentType};base64,{Convert.ToBase64String(file.Data)}");
            counter++;

        }
        foreach (var item in images)
        {
            Console.WriteLine(item);
        }


        Console.WriteLine(images.Count);
        Console.WriteLine(saveFile.Files.Count);
    }

}
