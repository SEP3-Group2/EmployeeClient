@page "/reserveHistory"
@using EmployeeClient.Models
@using EmployeeClient.Data
@using System.IO
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject ITransactionProductService TransactionProductService
@inject ITransactionService TransactionService
@inject IWarehouseService WarehouseService
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = "SecurityLevel2")]

<div class="container float-left">
    <div class="row searchFilter">

        <div class="col row" >
            <select @bind="store" class="btn btn-light" style="width:150px; margin-right:5px;">
                <option selected hidden disabled>City..</option>
                <option>All</option>
                <option>Horsens </option>
                <option>Aalborg </option>
                <option>Frederiksberg</option>
            </select>
            <select @bind="deliveryMethod" class="btn btn-light" style="width:150px; margin-right:5px;">
                <option disabled hidden>Status..</option>
                <option>All</option>
                <option>Delivered</option>
                <option>Reserved</option>
            </select>
            <input id="table_filter" type="text" class="form-control" style="width:250px; margin-right:2px;" placeholder="Customer Email..." @bind-value="email">
            <button @onclick="ExecuteSearch" class="btn btn-primary" style="margin-top:10px;"><span class="material-icons">search</span></button>

        </div>


    </div>
</div>

<table class="table cartTable">
    <thead class="cartThead">
        <tr>
            <th>Transaction ID</th>
            <th>Store ID</th>
            <th>Product Title</th>
            <th>Quantity</th>
            <th>Total price</th>
            <th>Customer Name</th>
            <th>Email</th>
            <th>Delivery status</th>
            <th>Change status</th>
        </tr>
    </thead>
    <tbody class="cartTbody">
        @foreach (var transaction in historyToShow)
        {
            if (lastId != transaction.Transactionod)
            {
                lastId = transaction.Transactionod;
                <tr class="rowsToColor">
                    <td>@transaction.Transactionod</td>
                    <td>@transaction.Storeid</td>

                    <td>
                        @foreach (var product in historyToShow)
                        {
                            if (lastId == product.Transactionod)
                            {
                        <tr>@product.Title</tr>
                    }


                }
                        </td>

                    <td>
                        @foreach (var product in historyToShow)
                        {
                            if (lastId == product.Transactionod)
                            {
                            <tr>@product.Quantity</tr>
                        }


                    }
                        </td>

                        <td>@transaction.Totalprice </td>
                        <td>@transaction.Customername </td>
                        <td>@transaction.Email </td>
                        <td>@transaction.Deliverymethod </td>
                        <td>
                            @if (transaction.Deliverymethod.Equals("under preparation"))
                            {
                                <button class="btn-warning" style="border: none; width:130px;" @onclick="() => ChangeToReady(transaction.Transactionod)">
                                    <i class="material-icons" style=" padding: 0;">notifications_active</i> Is prepared
                                </button>
                            }

                            @if (transaction.Deliverymethod.Equals("Ready for pickup"))
                            {
                                <button class="btn btn-success" style=" border: none; width:130px;" @onclick="() => ChangeToDelivery(transaction.Transactionod,transaction.Storeid,transaction.ProductId,transaction.Quantity)">
                                    <i class="material-icons">done_outline</i> Deliverd
                                </button>
                            }
                        </td>



                        </tr>
                    }
                }
        </tbody>
    </table>



    @code {
        List<EmployeeClient.Models.ReserveHistory> allHistory = new List<EmployeeClient.Models.ReserveHistory>();
        List<EmployeeClient.Models.ReserveHistory> historyToShow = new List<EmployeeClient.Models.ReserveHistory>();

        int lastId = 0;
        string store = "All";
        string deliveryMethod = "All";

        int storeid = 0;
        string email = "";
        string delivery = "";

        int transactionid = 0;

        protected override async Task OnInitializedAsync()
        {
            allHistory = await TransactionProductService.getAllReserveHistory();
            historyToShow = allHistory;
        }

        private async Task ExecuteSearch()
        {
            if (store.Equals("All"))
            {
                storeid = 0;
            }
            if (store.Equals("Horsens"))
            {
                storeid = 1;
            }
            if (store.Equals("Aalborg"))
            {
                storeid = 2;
            }
            if (store.Equals("Frederiksberg"))
            {
                storeid = 3;
            }

            if (deliveryMethod.Equals("Delivered"))
            {
                delivery = "Delivered";
            }
            if (deliveryMethod.Equals("Reserved"))
            {
                delivery = "u";
            }
            if (deliveryMethod.Equals("All"))
            {
                delivery = "e";
            }


            if (email.Equals("") || email == null)
            {

                historyToShow = await TransactionProductService.getReserveHistoryByStoreEmail(storeid, delivery);
            }
            else
            {
                historyToShow = await TransactionProductService.getReserveHistoryByStoreEmailDelivery(storeid, email, delivery);
            }
        }

        public async Task ChangeToReady(int id)
        {
            await TransactionService.UpdateToReady(id);
            await ExecuteSearch();
        }

        public async Task ChangeToDelivery(int id, int storeid, int productid, int quantity)
        {
            await WarehouseService.UpdateWarehouseQuantity(storeid, productid, quantity);
            await TransactionService.UpdateToDelivered(id);
            await ExecuteSearch();
        }

    }
